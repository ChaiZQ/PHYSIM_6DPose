// Generated by gencpp from file detection_package/UpdateActiveListFrameRequest.msg
// DO NOT EDIT!


#ifndef DETECTION_PACKAGE_MESSAGE_UPDATEACTIVELISTFRAMEREQUEST_H
#define DETECTION_PACKAGE_MESSAGE_UPDATEACTIVELISTFRAMEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_package
{
template <class ContainerAllocator>
struct UpdateActiveListFrameRequest_
{
  typedef UpdateActiveListFrameRequest_<ContainerAllocator> Type;

  UpdateActiveListFrameRequest_()
    : active_list()
    , active_frame()  {
    }
  UpdateActiveListFrameRequest_(const ContainerAllocator& _alloc)
    : active_list(_alloc)
    , active_frame(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _active_list_type;
  _active_list_type active_list;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _active_frame_type;
  _active_frame_type active_frame;




  typedef boost::shared_ptr< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateActiveListFrameRequest_

typedef ::detection_package::UpdateActiveListFrameRequest_<std::allocator<void> > UpdateActiveListFrameRequest;

typedef boost::shared_ptr< ::detection_package::UpdateActiveListFrameRequest > UpdateActiveListFrameRequestPtr;
typedef boost::shared_ptr< ::detection_package::UpdateActiveListFrameRequest const> UpdateActiveListFrameRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace detection_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "060dc8f8f1664285fb19fe321542ac79";
  }

  static const char* value(const ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x060dc8f8f1664285ULL;
  static const uint64_t static_value2 = 0xfb19fe321542ac79ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_package/UpdateActiveListFrameRequest";
  }

  static const char* value(const ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] active_list\n\
string active_frame\n\
";
  }

  static const char* value(const ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.active_list);
      stream.next(m.active_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateActiveListFrameRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_package::UpdateActiveListFrameRequest_<ContainerAllocator>& v)
  {
    s << indent << "active_list[]" << std::endl;
    for (size_t i = 0; i < v.active_list.size(); ++i)
    {
      s << indent << "  active_list[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.active_list[i]);
    }
    s << indent << "active_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.active_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_PACKAGE_MESSAGE_UPDATEACTIVELISTFRAMEREQUEST_H
