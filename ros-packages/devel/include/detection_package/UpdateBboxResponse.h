// Generated by gencpp from file detection_package/UpdateBboxResponse.msg
// DO NOT EDIT!


#ifndef DETECTION_PACKAGE_MESSAGE_UPDATEBBOXRESPONSE_H
#define DETECTION_PACKAGE_MESSAGE_UPDATEBBOXRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace detection_package
{
template <class ContainerAllocator>
struct UpdateBboxResponse_
{
  typedef UpdateBboxResponse_<ContainerAllocator> Type;

  UpdateBboxResponse_()
    : object_num()
    , tl_x()
    , tl_y()
    , br_x()
    , br_y()
    , scores()  {
    }
  UpdateBboxResponse_(const ContainerAllocator& _alloc)
    : object_num(_alloc)
    , tl_x(_alloc)
    , tl_y(_alloc)
    , br_x(_alloc)
    , br_y(_alloc)
    , scores(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _object_num_type;
  _object_num_type object_num;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _tl_x_type;
  _tl_x_type tl_x;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _tl_y_type;
  _tl_y_type tl_y;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _br_x_type;
  _br_x_type br_x;

   typedef std::vector<int64_t, typename ContainerAllocator::template rebind<int64_t>::other >  _br_y_type;
  _br_y_type br_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _scores_type;
  _scores_type scores;




  typedef boost::shared_ptr< ::detection_package::UpdateBboxResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::detection_package::UpdateBboxResponse_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateBboxResponse_

typedef ::detection_package::UpdateBboxResponse_<std::allocator<void> > UpdateBboxResponse;

typedef boost::shared_ptr< ::detection_package::UpdateBboxResponse > UpdateBboxResponsePtr;
typedef boost::shared_ptr< ::detection_package::UpdateBboxResponse const> UpdateBboxResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::detection_package::UpdateBboxResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace detection_package

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::detection_package::UpdateBboxResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::detection_package::UpdateBboxResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::detection_package::UpdateBboxResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4b4c0b74d20dc4fc963150efff11607";
  }

  static const char* value(const ::detection_package::UpdateBboxResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4b4c0b74d20dc4fULL;
  static const uint64_t static_value2 = 0xc963150efff11607ULL;
};

template<class ContainerAllocator>
struct DataType< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "detection_package/UpdateBboxResponse";
  }

  static const char* value(const ::detection_package::UpdateBboxResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64[] object_num\n\
int64[] tl_x\n\
int64[] tl_y\n\
int64[] br_x\n\
int64[] br_y\n\
float64[] scores\n\
\n\
";
  }

  static const char* value(const ::detection_package::UpdateBboxResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_num);
      stream.next(m.tl_x);
      stream.next(m.tl_y);
      stream.next(m.br_x);
      stream.next(m.br_y);
      stream.next(m.scores);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateBboxResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::detection_package::UpdateBboxResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::detection_package::UpdateBboxResponse_<ContainerAllocator>& v)
  {
    s << indent << "object_num[]" << std::endl;
    for (size_t i = 0; i < v.object_num.size(); ++i)
    {
      s << indent << "  object_num[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.object_num[i]);
    }
    s << indent << "tl_x[]" << std::endl;
    for (size_t i = 0; i < v.tl_x.size(); ++i)
    {
      s << indent << "  tl_x[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.tl_x[i]);
    }
    s << indent << "tl_y[]" << std::endl;
    for (size_t i = 0; i < v.tl_y.size(); ++i)
    {
      s << indent << "  tl_y[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.tl_y[i]);
    }
    s << indent << "br_x[]" << std::endl;
    for (size_t i = 0; i < v.br_x.size(); ++i)
    {
      s << indent << "  br_x[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.br_x[i]);
    }
    s << indent << "br_y[]" << std::endl;
    for (size_t i = 0; i < v.br_y.size(); ++i)
    {
      s << indent << "  br_y[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.br_y[i]);
    }
    s << indent << "scores[]" << std::endl;
    for (size_t i = 0; i < v.scores.size(); ++i)
    {
      s << indent << "  scores[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.scores[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // DETECTION_PACKAGE_MESSAGE_UPDATEBBOXRESPONSE_H
