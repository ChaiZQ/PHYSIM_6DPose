// Generated by gencpp from file marvin_convnet/DetectObjectsRequest.msg
// DO NOT EDIT!


#ifndef MARVIN_CONVNET_MESSAGE_DETECTOBJECTSREQUEST_H
#define MARVIN_CONVNET_MESSAGE_DETECTOBJECTSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace marvin_convnet
{
template <class ContainerAllocator>
struct DetectObjectsRequest_
{
  typedef DetectObjectsRequest_<ContainerAllocator> Type;

  DetectObjectsRequest_()
    : ObjectNames()
    , BinId(0)
    , FrameId(0)  {
    }
  DetectObjectsRequest_(const ContainerAllocator& _alloc)
    : ObjectNames(_alloc)
    , BinId(0)
    , FrameId(0)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _ObjectNames_type;
  _ObjectNames_type ObjectNames;

   typedef int32_t _BinId_type;
  _BinId_type BinId;

   typedef int32_t _FrameId_type;
  _FrameId_type FrameId;




  typedef boost::shared_ptr< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DetectObjectsRequest_

typedef ::marvin_convnet::DetectObjectsRequest_<std::allocator<void> > DetectObjectsRequest;

typedef boost::shared_ptr< ::marvin_convnet::DetectObjectsRequest > DetectObjectsRequestPtr;
typedef boost::shared_ptr< ::marvin_convnet::DetectObjectsRequest const> DetectObjectsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace marvin_convnet

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'marvin_convnet': ['/home/pracsys/github/PHYSIM_6DPose/ros-packages/src/marvin_convnet/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab5d8feef52ae67e0ba99d283862f9b7";
  }

  static const char* value(const ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab5d8feef52ae67eULL;
  static const uint64_t static_value2 = 0x0ba99d283862f9b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "marvin_convnet/DetectObjectsRequest";
  }

  static const char* value(const ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] ObjectNames\n\
int32 BinId\n\
int32 FrameId\n\
\n\
";
  }

  static const char* value(const ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ObjectNames);
      stream.next(m.BinId);
      stream.next(m.FrameId);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectObjectsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::marvin_convnet::DetectObjectsRequest_<ContainerAllocator>& v)
  {
    s << indent << "ObjectNames[]" << std::endl;
    for (size_t i = 0; i < v.ObjectNames.size(); ++i)
    {
      s << indent << "  ObjectNames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ObjectNames[i]);
    }
    s << indent << "BinId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.BinId);
    s << indent << "FrameId: ";
    Printer<int32_t>::stream(s, indent + "  ", v.FrameId);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MARVIN_CONVNET_MESSAGE_DETECTOBJECTSREQUEST_H
