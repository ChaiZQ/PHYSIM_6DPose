// Generated by gencpp from file realsense_camera/StreamSensorResponse.msg
// DO NOT EDIT!


#ifndef REALSENSE_CAMERA_MESSAGE_STREAMSENSORRESPONSE_H
#define REALSENSE_CAMERA_MESSAGE_STREAMSENSORRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace realsense_camera
{
template <class ContainerAllocator>
struct StreamSensorResponse_
{
  typedef StreamSensorResponse_<ContainerAllocator> Type;

  StreamSensorResponse_()
    : cloudXYZ()
    , cloudRGB()
    , rawDepth()
    , colorCamIntrinsics()
    , depthCamIntrinsics()
    , depth2colorExtrinsics()  {
    }
  StreamSensorResponse_(const ContainerAllocator& _alloc)
    : cloudXYZ(_alloc)
    , cloudRGB(_alloc)
    , rawDepth(_alloc)
    , colorCamIntrinsics(_alloc)
    , depthCamIntrinsics(_alloc)
    , depth2colorExtrinsics(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _cloudXYZ_type;
  _cloudXYZ_type cloudXYZ;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _cloudRGB_type;
  _cloudRGB_type cloudRGB;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _rawDepth_type;
  _rawDepth_type rawDepth;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _colorCamIntrinsics_type;
  _colorCamIntrinsics_type colorCamIntrinsics;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _depthCamIntrinsics_type;
  _depthCamIntrinsics_type depthCamIntrinsics;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _depth2colorExtrinsics_type;
  _depth2colorExtrinsics_type depth2colorExtrinsics;




  typedef boost::shared_ptr< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> const> ConstPtr;

}; // struct StreamSensorResponse_

typedef ::realsense_camera::StreamSensorResponse_<std::allocator<void> > StreamSensorResponse;

typedef boost::shared_ptr< ::realsense_camera::StreamSensorResponse > StreamSensorResponsePtr;
typedef boost::shared_ptr< ::realsense_camera::StreamSensorResponse const> StreamSensorResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::realsense_camera::StreamSensorResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace realsense_camera

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27bb6b26709cd7555e9a09362b7c10b3";
  }

  static const char* value(const ::realsense_camera::StreamSensorResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27bb6b26709cd755ULL;
  static const uint64_t static_value2 = 0x5e9a09362b7c10b3ULL;
};

template<class ContainerAllocator>
struct DataType< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "realsense_camera/StreamSensorResponse";
  }

  static const char* value(const ::realsense_camera::StreamSensorResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
\n\
float32[] cloudXYZ\n\
uint8[] cloudRGB\n\
float32[] rawDepth\n\
\n\
\n\
float32[] colorCamIntrinsics\n\
float32[] depthCamIntrinsics\n\
float32[] depth2colorExtrinsics\n\
\n\
";
  }

  static const char* value(const ::realsense_camera::StreamSensorResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cloudXYZ);
      stream.next(m.cloudRGB);
      stream.next(m.rawDepth);
      stream.next(m.colorCamIntrinsics);
      stream.next(m.depthCamIntrinsics);
      stream.next(m.depth2colorExtrinsics);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StreamSensorResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::realsense_camera::StreamSensorResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::realsense_camera::StreamSensorResponse_<ContainerAllocator>& v)
  {
    s << indent << "cloudXYZ[]" << std::endl;
    for (size_t i = 0; i < v.cloudXYZ.size(); ++i)
    {
      s << indent << "  cloudXYZ[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cloudXYZ[i]);
    }
    s << indent << "cloudRGB[]" << std::endl;
    for (size_t i = 0; i < v.cloudRGB.size(); ++i)
    {
      s << indent << "  cloudRGB[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.cloudRGB[i]);
    }
    s << indent << "rawDepth[]" << std::endl;
    for (size_t i = 0; i < v.rawDepth.size(); ++i)
    {
      s << indent << "  rawDepth[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.rawDepth[i]);
    }
    s << indent << "colorCamIntrinsics[]" << std::endl;
    for (size_t i = 0; i < v.colorCamIntrinsics.size(); ++i)
    {
      s << indent << "  colorCamIntrinsics[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.colorCamIntrinsics[i]);
    }
    s << indent << "depthCamIntrinsics[]" << std::endl;
    for (size_t i = 0; i < v.depthCamIntrinsics.size(); ++i)
    {
      s << indent << "  depthCamIntrinsics[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.depthCamIntrinsics[i]);
    }
    s << indent << "depth2colorExtrinsics[]" << std::endl;
    for (size_t i = 0; i < v.depth2colorExtrinsics.size(); ++i)
    {
      s << indent << "  depth2colorExtrinsics[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.depth2colorExtrinsics[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // REALSENSE_CAMERA_MESSAGE_STREAMSENSORRESPONSE_H
