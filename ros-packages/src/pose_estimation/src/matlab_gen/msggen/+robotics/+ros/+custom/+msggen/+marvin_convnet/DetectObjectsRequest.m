classdef DetectObjectsRequest < robotics.ros.Message
    %DetectObjectsRequest MATLAB implementation of marvin_convnet/DetectObjectsRequest
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2017 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'marvin_convnet/DetectObjectsRequest' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'ab5d8feef52ae67e0ba99d283862f9b7' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        BinId
        FrameId
        ObjectNames
    end
    
    properties (Constant, Hidden)
        PropertyList = {'BinId', 'FrameId', 'ObjectNames'} % List of non-constant message properties
        ROSPropertyList = {'BinId', 'FrameId', 'ObjectNames'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = DetectObjectsRequest(msg)
            %DetectObjectsRequest Construct the message object DetectObjectsRequest
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function binid = get.BinId(obj)
            %get.BinId Get the value for property BinId
            binid = int32(obj.JavaMessage.getBinId);
        end
        
        function set.BinId(obj, binid)
            %set.BinId Set the value for property BinId
            validateattributes(binid, {'numeric'}, {'nonempty', 'scalar'}, 'DetectObjectsRequest', 'BinId');
            
            obj.JavaMessage.setBinId(binid);
        end
        
        function frameid = get.FrameId(obj)
            %get.FrameId Get the value for property FrameId
            frameid = int32(obj.JavaMessage.getFrameId);
        end
        
        function set.FrameId(obj, frameid)
            %set.FrameId Set the value for property FrameId
            validateattributes(frameid, {'numeric'}, {'nonempty', 'scalar'}, 'DetectObjectsRequest', 'FrameId');
            
            obj.JavaMessage.setFrameId(frameid);
        end
        
        function objectnames = get.ObjectNames(obj)
            %get.ObjectNames Get the value for property ObjectNames
            javaArray = obj.JavaMessage.getObjectNames;
            array = obj.readJavaArray(javaArray, 'char');
            objectnames = arrayfun(@(x) char(x), array, 'UniformOutput', false);
        end
        
        function set.ObjectNames(obj, objectnames)
            %set.ObjectNames Set the value for property ObjectNames
            if ~isvector(objectnames) && isempty(objectnames)
                % Allow empty [] input
                objectnames = cell.empty(0,1);
            end
            
            validateattributes(objectnames, {'cell'}, {'vector'}, 'DetectObjectsRequest', 'ObjectNames');
            if any(cellfun(@(x) ~ischar(x), objectnames))
                error(message('robotics:ros:message:CellArrayStringError', ...
                    'objectnames'));
            end
            
            javaArray = obj.JavaMessage.getObjectNames;
            array = obj.writeJavaArray(objectnames, javaArray, 'char');
            obj.JavaMessage.setObjectNames(array);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.BinId = obj.BinId;
            cpObj.FrameId = obj.FrameId;
            cpObj.ObjectNames = obj.ObjectNames;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.BinId = strObj.BinId;
            obj.FrameId = strObj.FrameId;
            obj.ObjectNames = strObj.ObjectNames;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.BinId = obj.BinId;
            strObj.FrameId = obj.FrameId;
            strObj.ObjectNames = obj.ObjectNames;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.marvin_convnet.DetectObjectsRequest.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.marvin_convnet.DetectObjectsRequest;
            obj.reload(strObj);
        end
    end
end
